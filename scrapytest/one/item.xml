<?xml version="1.0" encoding="utf-8"?>
<items>
<item><text><value>在本篇教程中，我们假定您已经安装好Scrapy。
如若不然，请参考 </value><value> 。</value><value>接下来以 </value><value>
为例来讲述爬取。</value><value>本篇教程中将带您完成下列任务:</value><value>Scrapy由 </value><value> 编写。如果您刚接触并且好奇这门语言的特性以及Scrapy的详情，
对于已经熟悉其他语言并且想快速学习Python的编程老手，
我们推荐 </value><value> ，
对于想从Python开始学习的编程新手，
</value><value> 将是您的选择。</value></text></item>
<item><text><value>在开始爬取之前，您必须创建一个新的Scrapy项目。
进入您打算存储代码的目录中，运行下列命令:</value><value>该命令将会创建包含下列内容的 </value><value> 目录:</value><value>这些文件分别是:</value></text></item>
<item><text><value> 是保存爬取到的数据的容器；其使用方法和python字典类似，
并且提供了额外保护机制来避免拼写错误导致的未定义字段错误。</value><value>类似在ORM中做的一样，您可以通过创建一个 </value><value> 类，
并且定义类型为 </value><value> 的类属性来定义一个Item。
(如果不了解ORM, 不用担心，您会发现这个步骤非常简单)</value><value>首先根据需要从dmoz.org获取到的数据对item进行建模。
我们需要从dmoz中获取名字，url，以及网站的描述。
对此，在item中定义相应的字段。编辑 </value><value> 目录中的 </value><value> 文件:</value><value>一开始这看起来可能有点复杂，但是通过定义item，
您可以很方便的使用Scrapy的其他方法。而这些方法需要知道您的item的定义。</value></text></item>
<item><text><value>Spider是用户编写用于从单个网站(或者一些网站)爬取数据的类。</value><value>其包含了一个用于下载的初始URL，如何跟进网页中的链接以及如何分析页面中的内容，
提取生成 </value><value> 的方法。</value><value>为了创建一个Spider，您必须继承 </value><value> 类，
且定义以下三个属性:</value><value>以下为我们的第一个Spider代码，保存在 </value><value> 目录下的 </value><value> 文件中:</value></text></item>
<item><text><value>进入项目的根目录，执行下列命令启动spider:</value><value> 启动用于爬取 </value><value> 的spider，您将得到类似的输出:</value><value>查看包含 </value><value> 的输出，可以看到输出的log中包含定义在 </value><value> 的初始URL，并且与spider中是一一对应的。在log中可以看到其没有指向其他页面( </value><value> )。</value><value>除此之外，更有趣的事情发生了。就像我们 </value><value> 方法指定的那样，有两个包含url所对应的内容的文件被创建了: </value><value> , </value><value> 。</value></text></item>
<item><text><value>Scrapy为Spider的 </value><value> 属性中的每个URL创建了 </value><value> 对象，并将 </value><value> 方法作为回调函数(callback)赋值给了Request。</value><value>Request对象经过调度，执行生成 </value><value> 对象并送回给spider </value><value> 方法。</value></text></item>
<item><text></text></item>
<item><text><value>从网页中提取数据有很多方法。Scrapy使用了一种基于 </value><value> 和 </value><value> 表达式机制:
</value><value> 。
关于selector和其他提取机制的信息请参考 </value><value> 。</value><value>这里给出XPath表达式的例子及对应的含义:</value><value>上边仅仅是几个简单的XPath例子，XPath实际上要比这远远强大的多。
如果您想了解的更多，我们推荐 </value><value> 。</value><value>为了配合XPath，Scrapy除了提供了 </value><value>
之外，还提供了方法来避免每次从response中提取数据时生成selector的麻烦。</value><value>Selector有四个基本的方法(点击相应的方法可以看到详细的API文档):</value></text></item>
<item><text><value>为了介绍Selector的使用方法，接下来我们将要使用内置的 </value><value> 。Scrapy Shell需要您预装好IPython(一个扩展的Python终端)。</value><value>您需要进入项目的根目录，执行下列命令来启动shell:</value><value>shell的输出类似:</value><value>当shell载入后，您将得到一个包含response数据的本地 </value><value> 变量。输入 </value><value> 将输出response的包体， 输出 </value><value> 可以看到response的包头。</value><value>更为重要的是，当输入 </value><value> 时，
您将获取到一个可以用于查询返回数据的selector(选择器)，
以及映射到 </value><value> 、 </value><value> 的
快捷方法(shortcut): </value><value> 和 </value><value> 。</value><value>同时，shell根据response提前初始化了变量 </value><value> 。该selector根据response的类型自动选择最合适的分析规则(XML vs HTML)。</value><value>让我们来试试:</value></text></item>
<item><text><value>现在，我们来尝试从这些页面中提取些有用的数据。</value><value>您可以在终端中输入 </value><value> 来观察HTML源码并确定合适的XPath表达式。不过，这任务非常无聊且不易。您可以考虑使用Firefox的Firebug扩展来使得工作更为轻松。详情请参考 </value><value> 和 </value><value> 。</value><value>在查看了网页的源码后，您会发现网站的信息是被包含在 </value><value> </value><value> 元素中。</value><value>我们可以通过这段代码选择该页面中网站列表里所有 </value><value> 元素:</value><value>网站的描述:</value><value>网站的标题:</value><value>以及网站的链接:</value><value>之前提到过，每个 </value><value> 调用返回selector组成的list，因此我们可以拼接更多的 </value><value> 来进一步获取某个节点。我们将在下边使用这样的特性:</value><value>在我们的spider中加入这段代码:</value><value>现在尝试再次爬取dmoz.org，您将看到爬取到的网站信息被成功输出:</value></text></item>
<item><text><value> 对象是自定义的python字典。
您可以使用标准的字典语法来获取到其每个字段的值。(字段即是我们之前用Field赋值的属性):</value><value>一般来说，Spider将会将爬取到的数据以 </value><value> 对象返回。所以为了将爬取的数据返回，我们最终的代码将是:</value><value>现在对dmoz.org进行爬取将会产生 </value><value> 对象:</value></text></item>
<item><text><value>最简单存储爬取的数据的方式是使用 </value><value>:</value><value>该命令将采用 </value><value> 格式对爬取的数据进行序列化，生成 </value><value> 文件。</value><value>在类似本篇教程里这样小规模的项目中，这种存储方式已经足够。
如果需要对爬取到的item做更多更为复杂的操作，您可以编写
</value><value> 。
类似于我们在创建项目时对Item做的，用于您编写自己的
</value><value> 也被创建。
不过如果您仅仅想要保存item，您不需要实现任何的pipeline。</value></text></item>
<item><text><value>本篇教程仅介绍了Scrapy的基础，还有很多特性没有涉及。请查看 </value><value> 章节中的 </value><value> 部分,大致浏览大部分重要的特性。</value><value>接着，我们推荐您把玩一个例子(查看 </value><value>)，而后继续阅读 </value><value> 。</value></text></item>
</items>